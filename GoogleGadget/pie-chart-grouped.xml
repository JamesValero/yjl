<?xml version="1.0" encoding="UTF-8"?>
<Module>

  <ModulePrefs
      title="Pie chart using grouped data"
      description="Pie chart using grouped data"
      author="Yu-Jie Lin"
      author_email="livibetter+gadget+pie@gmail.com">
    <!-- Link: http://makeyjl.blogspot.com/ -->
    <Require feature="idi" />
    <Require feature="locked-domain" />
  </ModulePrefs>

  <UserPref name="_table_query_url" display_name="Data source url" required="true"/>
  <UserPref name="_table_query_refresh_interval" display_name="Data refresh interval (minutes)" default_value="0" datatype="enum" required="false">
    <EnumValue value="0" display_value="Do not refresh"/>
    <EnumValue value="60" display_value="1"/>
    <EnumValue value="300" display_value="5"/>
    <EnumValue value="1800" display_value="30"/>
  </UserPref>
  <UserPref name="chartTitle" display_name="Chart Title" datatype="string" default_value="Chart Title"/>
  <UserPref name="groupBy" display_name="Group by column" datatype="string" default_value="A" required="true"/>
  <UserPref name="aggregateOn" display_name="Aggregate on column" datatype="string" default_value="B" required="true"/>
  <UserPref name="aggregationFunction" display_name="Aggregation Function" datatype="enum" default_value="count" required="true">
    <EnumValue value="max" display_value="Max"/>
    <EnumValue value="min" display_value="Min"/>
    <EnumValue value="count" display_value="Count"/>
    <EnumValue value="avg" display_value="Average"/>
    <EnumValue value="sum" display_value="Sum"/>
  </UserPref>
  <UserPref name="limitResults" display_name="Limit Results" datatype="enum" default_value="0" required="true">
    <EnumValue value="0" display_value="Unlimited"/>
    <EnumValue value="3" display_value="3"/>
    <EnumValue value="5" display_value="5"/>
    <EnumValue value="10" display_value="10"/>
    <EnumValue value="20" display_value="20"/>
    <EnumValue value="50" display_value="50"/>
    <EnumValue value="100" display_value="100"/>
  </UserPref>
  <UserPref name="legend" display_name="Legend" datatype="enum" default_value="right" required="true">
    <EnumValue value="right" display_value="To the right of the chart"/>
    <EnumValue value="left" display_value="To the left of the chart"/>
    <EnumValue value="top" display_value="Above the chart"/>
    <EnumValue value="bottom" display_value="Below the chart"/>
    <EnumValue value="label" display_value="Labels near slices"/>
    <EnumValue value="none" display_value="No legend"/>
  </UserPref>
  <!--
  This is a sample gadget, that uses the Google Visualization API to read data
  from a data source, and displays it as an html table.
  -->

  <Content type="html"><![CDATA[
  <!-- begin=HTML --> 
  <!-- Load the Google common loader, that is later used to load the Visualization API. -->
  <script src="http://www.google.com/jsapi" type="text/javascript"></script>

  <div id="chartdiv" style="overflow: auto;"></div>

  <script>
    var gadgetHelper = null;
    var chart = null;
    
    _IG_RegisterOnloadHandler(loadVisualizationAPI);

    /**
     * Load the Google Visualization API
     */
    function loadVisualizationAPI() {
      google.load("visualization", "1", {"packages": ["piechart"]});
      google.setOnLoadCallback(sendQuery);
    }

    /**
     * Create a query from the user prefs, and then send it to the data source.
     * This method is called once the visualization API is fully loaded.
     * Note that in the last line, a callback function is specified to be
     * called once the response is received from the data source.
     */
    function sendQuery() {
      var prefs = new _IG_Prefs(); // User preferences
      var chartDiv = _gel('chartdiv');
      chartDiv.style.width = document.body.clientWidth + 'px';
      chartDiv.style.height = document.body.clientHeight + 'px';
      chart = new google.visualization.PieChart(_gel('chartdiv'));

      gadgetHelper = new google.visualization.GadgetHelper();
      var query = gadgetHelper.createQueryFromPrefs(prefs);
      var groupBy = prefs.getString('groupBy');
      var aggOn = prefs.getString('aggregateOn');
      var aggFunc = prefs.getString('aggregationFunction');
      var limitResults = prefs.getInt('limitResults');
      queryString = 'select ' + groupBy + ', ' +
        aggFunc + '(' + aggOn + ') group by ' + 
        groupBy + ' order by ' + aggFunc+ '(' + aggOn + ') desc'
      if (limitResults > 0)
        quertString += ' limit ' + limitResults.toString();
      query.setQuery(queryString);
      query.send(handleQueryResponse);
    }

    /**
     * Query response handler function.
     * Called by the Google Visualization API once the response is received.
     * Takes the query response and formats it as a table.
     */
    function handleQueryResponse(response) {
      // Use the visualization GadgetHelper class to validate the data, and
      // for error handling.
      if (!gadgetHelper.validateResponse(response)) {
        // Default error handling was done, just leave.
        return;
      };
      var data = response.getDataTable();

      // Take the data table from the response, and format it.
      var prefs = new _IG_Prefs(); // User preferences
      var options = {
        width: document.body.clientWidth,
        height: document.body.clientHeight,
        is3D: true,
        legend: prefs.getString('legend')};
      var title = prefs.getString('chartTitle');
      if (title.length > 0)
        options['title'] = title;
      chart.draw(data, options);
    };
  </script>
  <!-- end=HTML --> 
  ]]>
  </Content>
</Module>

